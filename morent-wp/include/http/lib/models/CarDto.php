<?php
/**
 * CarDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morent.WebApi | v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\models;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CarDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CarDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CarDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'car_model' => '\OpenAPI\Client\models\CarModelDto',
        'license_plate' => 'string',
        'price_per_day' => 'float',
        'currency' => 'string',
        'images' => '\OpenAPI\Client\models\CarImageDto[]',
        'is_available' => 'bool',
        'average_rating' => 'float',
        'reviews_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'car_model' => null,
        'license_plate' => null,
        'price_per_day' => 'double',
        'currency' => null,
        'images' => null,
        'is_available' => null,
        'average_rating' => 'double',
        'reviews_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'car_model' => false,
        'license_plate' => false,
        'price_per_day' => false,
        'currency' => false,
        'images' => false,
        'is_available' => false,
        'average_rating' => false,
        'reviews_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'car_model' => 'carModel',
        'license_plate' => 'licensePlate',
        'price_per_day' => 'pricePerDay',
        'currency' => 'currency',
        'images' => 'images',
        'is_available' => 'isAvailable',
        'average_rating' => 'averageRating',
        'reviews_count' => 'reviewsCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'car_model' => 'setCarModel',
        'license_plate' => 'setLicensePlate',
        'price_per_day' => 'setPricePerDay',
        'currency' => 'setCurrency',
        'images' => 'setImages',
        'is_available' => 'setIsAvailable',
        'average_rating' => 'setAverageRating',
        'reviews_count' => 'setReviewsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'car_model' => 'getCarModel',
        'license_plate' => 'getLicensePlate',
        'price_per_day' => 'getPricePerDay',
        'currency' => 'getCurrency',
        'images' => 'getImages',
        'is_available' => 'getIsAvailable',
        'average_rating' => 'getAverageRating',
        'reviews_count' => 'getReviewsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('car_model', $data ?? [], null);
        $this->setIfExists('license_plate', $data ?? [], null);
        $this->setIfExists('price_per_day', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('is_available', $data ?? [], null);
        $this->setIfExists('average_rating', $data ?? [], null);
        $this->setIfExists('reviews_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets car_model
     *
     * @return \OpenAPI\Client\models\CarModelDto|null
     */
    public function getCarModel()
    {
        return $this->container['car_model'];
    }

    /**
     * Sets car_model
     *
     * @param \OpenAPI\Client\models\CarModelDto|null $car_model car_model
     *
     * @return self
     */
    public function setCarModel($car_model)
    {
        if (is_null($car_model)) {
            throw new \InvalidArgumentException('non-nullable car_model cannot be null');
        }
        $this->container['car_model'] = $car_model;

        return $this;
    }

    /**
     * Gets license_plate
     *
     * @return string|null
     */
    public function getLicensePlate()
    {
        return $this->container['license_plate'];
    }

    /**
     * Sets license_plate
     *
     * @param string|null $license_plate license_plate
     *
     * @return self
     */
    public function setLicensePlate($license_plate)
    {
        if (is_null($license_plate)) {
            throw new \InvalidArgumentException('non-nullable license_plate cannot be null');
        }
        $this->container['license_plate'] = $license_plate;

        return $this;
    }

    /**
     * Gets price_per_day
     *
     * @return float|null
     */
    public function getPricePerDay()
    {
        return $this->container['price_per_day'];
    }

    /**
     * Sets price_per_day
     *
     * @param float|null $price_per_day price_per_day
     *
     * @return self
     */
    public function setPricePerDay($price_per_day)
    {
        if (is_null($price_per_day)) {
            throw new \InvalidArgumentException('non-nullable price_per_day cannot be null');
        }
        $this->container['price_per_day'] = $price_per_day;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\models\CarImageDto[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\models\CarImageDto[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets is_available
     *
     * @return bool|null
     */
    public function getIsAvailable()
    {
        return $this->container['is_available'];
    }

    /**
     * Sets is_available
     *
     * @param bool|null $is_available is_available
     *
     * @return self
     */
    public function setIsAvailable($is_available)
    {
        if (is_null($is_available)) {
            throw new \InvalidArgumentException('non-nullable is_available cannot be null');
        }
        $this->container['is_available'] = $is_available;

        return $this;
    }

    /**
     * Gets average_rating
     *
     * @return float|null
     */
    public function getAverageRating()
    {
        return $this->container['average_rating'];
    }

    /**
     * Sets average_rating
     *
     * @param float|null $average_rating average_rating
     *
     * @return self
     */
    public function setAverageRating($average_rating)
    {
        if (is_null($average_rating)) {
            throw new \InvalidArgumentException('non-nullable average_rating cannot be null');
        }
        $this->container['average_rating'] = $average_rating;

        return $this;
    }

    /**
     * Gets reviews_count
     *
     * @return int|null
     */
    public function getReviewsCount()
    {
        return $this->container['reviews_count'];
    }

    /**
     * Sets reviews_count
     *
     * @param int|null $reviews_count reviews_count
     *
     * @return self
     */
    public function setReviewsCount($reviews_count)
    {
        if (is_null($reviews_count)) {
            throw new \InvalidArgumentException('non-nullable reviews_count cannot be null');
        }
        $this->container['reviews_count'] = $reviews_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


