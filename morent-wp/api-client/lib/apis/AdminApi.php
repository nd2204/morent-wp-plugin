<?php
/**
 * AdminApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morent.WebApi | v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\apis;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AdminApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiAdminCarsCarIdImagesImageIdPost' => [
            'application/json',
        ],
        'apiAdminCarsCarIdImagesImageIdSetPrimaryPut' => [
            'application/json',
        ],
        'apiAdminCarsCarIdImagesPost' => [
            'application/x-www-form-urlencoded',
        ],
        'apiAdminCarsCarIdImagesReorderPut' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiAdminCarsIdDelete' => [
            'application/json',
        ],
        'apiAdminCarsIdPut' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiAdminCarsPost' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiAdminRentalsGet' => [
            'application/json',
        ],
        'apiAdminUsersGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdPost
     *
     * @param  string $car_id car_id (required)
     * @param  string $image_id image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAdminCarsCarIdImagesImageIdPost($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'][0])
    {
        $this->apiAdminCarsCarIdImagesImageIdPostWithHttpInfo($car_id, $image_id, $contentType);
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdPostWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminCarsCarIdImagesImageIdPostWithHttpInfo($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'][0])
    {
        $request = $this->apiAdminCarsCarIdImagesImageIdPostRequest($car_id, $image_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdPostAsync
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesImageIdPostAsync($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'][0])
    {
        return $this->apiAdminCarsCarIdImagesImageIdPostAsyncWithHttpInfo($car_id, $image_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdPostAsyncWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesImageIdPostAsyncWithHttpInfo($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiAdminCarsCarIdImagesImageIdPostRequest($car_id, $image_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminCarsCarIdImagesImageIdPost'
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminCarsCarIdImagesImageIdPostRequest($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdPost'][0])
    {

        // verify the required parameter 'car_id' is set
        if ($car_id === null || (is_array($car_id) && count($car_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $car_id when calling apiAdminCarsCarIdImagesImageIdPost'
            );
        }

        // verify the required parameter 'image_id' is set
        if ($image_id === null || (is_array($image_id) && count($image_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_id when calling apiAdminCarsCarIdImagesImageIdPost'
            );
        }


        $resourcePath = '/api/admin/cars/{carId}/images/{imageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($car_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carId' . '}',
                ObjectSerializer::toPathValue($car_id),
                $resourcePath
            );
        }
        // path params
        if ($image_id !== null) {
            $resourcePath = str_replace(
                '{' . 'imageId' . '}',
                ObjectSerializer::toPathValue($image_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdSetPrimaryPut
     *
     * @param  string $car_id car_id (required)
     * @param  string $image_id image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\models\CarImageDto|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails
     */
    public function apiAdminCarsCarIdImagesImageIdSetPrimaryPut($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'][0])
    {
        list($response) = $this->apiAdminCarsCarIdImagesImageIdSetPrimaryPutWithHttpInfo($car_id, $image_id, $contentType);
        return $response;
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdSetPrimaryPutWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\models\CarImageDto|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminCarsCarIdImagesImageIdSetPrimaryPutWithHttpInfo($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'][0])
    {
        $request = $this->apiAdminCarsCarIdImagesImageIdSetPrimaryPutRequest($car_id, $image_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\CarImageDto',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\ProblemDetails',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\ProblemDetails',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\models\CarImageDto',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\CarImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdSetPrimaryPutAsync
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesImageIdSetPrimaryPutAsync($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'][0])
    {
        return $this->apiAdminCarsCarIdImagesImageIdSetPrimaryPutAsyncWithHttpInfo($car_id, $image_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminCarsCarIdImagesImageIdSetPrimaryPutAsyncWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesImageIdSetPrimaryPutAsyncWithHttpInfo($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'][0])
    {
        $returnType = '\OpenAPI\Client\models\CarImageDto';
        $request = $this->apiAdminCarsCarIdImagesImageIdSetPrimaryPutRequest($car_id, $image_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminCarsCarIdImagesImageIdSetPrimaryPut'
     *
     * @param  string $car_id (required)
     * @param  string $image_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminCarsCarIdImagesImageIdSetPrimaryPutRequest($car_id, $image_id, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesImageIdSetPrimaryPut'][0])
    {

        // verify the required parameter 'car_id' is set
        if ($car_id === null || (is_array($car_id) && count($car_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $car_id when calling apiAdminCarsCarIdImagesImageIdSetPrimaryPut'
            );
        }

        // verify the required parameter 'image_id' is set
        if ($image_id === null || (is_array($image_id) && count($image_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_id when calling apiAdminCarsCarIdImagesImageIdSetPrimaryPut'
            );
        }


        $resourcePath = '/api/admin/cars/{carId}/images/{imageId}/set-primary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($car_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carId' . '}',
                ObjectSerializer::toPathValue($car_id),
                $resourcePath
            );
        }
        // path params
        if ($image_id !== null) {
            $resourcePath = str_replace(
                '{' . 'imageId' . '}',
                ObjectSerializer::toPathValue($image_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminCarsCarIdImagesPost
     *
     * @param  string $car_id car_id (required)
     * @param  \SplFileObject|null $image image (optional)
     * @param  string|null $image_url image_url (optional)
     * @param  bool|null $set_as_primary set_as_primary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\models\CarImageDto|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails
     */
    public function apiAdminCarsCarIdImagesPost($car_id, $image = null, $image_url = null, $set_as_primary = null, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesPost'][0])
    {
        list($response) = $this->apiAdminCarsCarIdImagesPostWithHttpInfo($car_id, $image, $image_url, $set_as_primary, $contentType);
        return $response;
    }

    /**
     * Operation apiAdminCarsCarIdImagesPostWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  \SplFileObject|null $image (optional)
     * @param  string|null $image_url (optional)
     * @param  bool|null $set_as_primary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\models\CarImageDto|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails|\OpenAPI\Client\models\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminCarsCarIdImagesPostWithHttpInfo($car_id, $image = null, $image_url = null, $set_as_primary = null, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesPost'][0])
    {
        $request = $this->apiAdminCarsCarIdImagesPostRequest($car_id, $image, $image_url, $set_as_primary, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\CarImageDto',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\ProblemDetails',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\ProblemDetails',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\models\CarImageDto',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\CarImageDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminCarsCarIdImagesPostAsync
     *
     * @param  string $car_id (required)
     * @param  \SplFileObject|null $image (optional)
     * @param  string|null $image_url (optional)
     * @param  bool|null $set_as_primary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesPostAsync($car_id, $image = null, $image_url = null, $set_as_primary = null, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesPost'][0])
    {
        return $this->apiAdminCarsCarIdImagesPostAsyncWithHttpInfo($car_id, $image, $image_url, $set_as_primary, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminCarsCarIdImagesPostAsyncWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  \SplFileObject|null $image (optional)
     * @param  string|null $image_url (optional)
     * @param  bool|null $set_as_primary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesPostAsyncWithHttpInfo($car_id, $image = null, $image_url = null, $set_as_primary = null, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesPost'][0])
    {
        $returnType = '\OpenAPI\Client\models\CarImageDto';
        $request = $this->apiAdminCarsCarIdImagesPostRequest($car_id, $image, $image_url, $set_as_primary, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminCarsCarIdImagesPost'
     *
     * @param  string $car_id (required)
     * @param  \SplFileObject|null $image (optional)
     * @param  string|null $image_url (optional)
     * @param  bool|null $set_as_primary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminCarsCarIdImagesPostRequest($car_id, $image = null, $image_url = null, $set_as_primary = null, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesPost'][0])
    {

        // verify the required parameter 'car_id' is set
        if ($car_id === null || (is_array($car_id) && count($car_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $car_id when calling apiAdminCarsCarIdImagesPost'
            );
        }





        $resourcePath = '/api/admin/cars/{carId}/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($car_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carId' . '}',
                ObjectSerializer::toPathValue($car_id),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'image' => $image,
            'image_url' => $image_url,
            'set_as_primary' => $set_as_primary,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminCarsCarIdImagesReorderPut
     *
     * @param  string $car_id car_id (required)
     * @param  \OpenAPI\Client\models\CarImageOrderItem[] $car_image_order_item car_image_order_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesReorderPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAdminCarsCarIdImagesReorderPut($car_id, $car_image_order_item, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesReorderPut'][0])
    {
        $this->apiAdminCarsCarIdImagesReorderPutWithHttpInfo($car_id, $car_image_order_item, $contentType);
    }

    /**
     * Operation apiAdminCarsCarIdImagesReorderPutWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  \OpenAPI\Client\models\CarImageOrderItem[] $car_image_order_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesReorderPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminCarsCarIdImagesReorderPutWithHttpInfo($car_id, $car_image_order_item, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesReorderPut'][0])
    {
        $request = $this->apiAdminCarsCarIdImagesReorderPutRequest($car_id, $car_image_order_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminCarsCarIdImagesReorderPutAsync
     *
     * @param  string $car_id (required)
     * @param  \OpenAPI\Client\models\CarImageOrderItem[] $car_image_order_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesReorderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesReorderPutAsync($car_id, $car_image_order_item, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesReorderPut'][0])
    {
        return $this->apiAdminCarsCarIdImagesReorderPutAsyncWithHttpInfo($car_id, $car_image_order_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminCarsCarIdImagesReorderPutAsyncWithHttpInfo
     *
     * @param  string $car_id (required)
     * @param  \OpenAPI\Client\models\CarImageOrderItem[] $car_image_order_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesReorderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsCarIdImagesReorderPutAsyncWithHttpInfo($car_id, $car_image_order_item, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesReorderPut'][0])
    {
        $returnType = '';
        $request = $this->apiAdminCarsCarIdImagesReorderPutRequest($car_id, $car_image_order_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminCarsCarIdImagesReorderPut'
     *
     * @param  string $car_id (required)
     * @param  \OpenAPI\Client\models\CarImageOrderItem[] $car_image_order_item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsCarIdImagesReorderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminCarsCarIdImagesReorderPutRequest($car_id, $car_image_order_item, string $contentType = self::contentTypes['apiAdminCarsCarIdImagesReorderPut'][0])
    {

        // verify the required parameter 'car_id' is set
        if ($car_id === null || (is_array($car_id) && count($car_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $car_id when calling apiAdminCarsCarIdImagesReorderPut'
            );
        }

        // verify the required parameter 'car_image_order_item' is set
        if ($car_image_order_item === null || (is_array($car_image_order_item) && count($car_image_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $car_image_order_item when calling apiAdminCarsCarIdImagesReorderPut'
            );
        }


        $resourcePath = '/api/admin/cars/{carId}/images/reorder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($car_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carId' . '}',
                ObjectSerializer::toPathValue($car_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($car_image_order_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($car_image_order_item));
            } else {
                $httpBody = $car_image_order_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminCarsIdDelete
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAdminCarsIdDelete($id, string $contentType = self::contentTypes['apiAdminCarsIdDelete'][0])
    {
        $this->apiAdminCarsIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiAdminCarsIdDeleteWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminCarsIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['apiAdminCarsIdDelete'][0])
    {
        $request = $this->apiAdminCarsIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminCarsIdDeleteAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsIdDeleteAsync($id, string $contentType = self::contentTypes['apiAdminCarsIdDelete'][0])
    {
        return $this->apiAdminCarsIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminCarsIdDeleteAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['apiAdminCarsIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiAdminCarsIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminCarsIdDelete'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminCarsIdDeleteRequest($id, string $contentType = self::contentTypes['apiAdminCarsIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiAdminCarsIdDelete'
            );
        }


        $resourcePath = '/api/admin/cars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminCarsIdPut
     *
     * @param  string $id id (required)
     * @param  \OpenAPI\Client\models\UpdateCarCommand $update_car_command update_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAdminCarsIdPut($id, $update_car_command, string $contentType = self::contentTypes['apiAdminCarsIdPut'][0])
    {
        $this->apiAdminCarsIdPutWithHttpInfo($id, $update_car_command, $contentType);
    }

    /**
     * Operation apiAdminCarsIdPutWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\models\UpdateCarCommand $update_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminCarsIdPutWithHttpInfo($id, $update_car_command, string $contentType = self::contentTypes['apiAdminCarsIdPut'][0])
    {
        $request = $this->apiAdminCarsIdPutRequest($id, $update_car_command, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminCarsIdPutAsync
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\models\UpdateCarCommand $update_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsIdPutAsync($id, $update_car_command, string $contentType = self::contentTypes['apiAdminCarsIdPut'][0])
    {
        return $this->apiAdminCarsIdPutAsyncWithHttpInfo($id, $update_car_command, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminCarsIdPutAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\models\UpdateCarCommand $update_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsIdPutAsyncWithHttpInfo($id, $update_car_command, string $contentType = self::contentTypes['apiAdminCarsIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiAdminCarsIdPutRequest($id, $update_car_command, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminCarsIdPut'
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\models\UpdateCarCommand $update_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminCarsIdPutRequest($id, $update_car_command, string $contentType = self::contentTypes['apiAdminCarsIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiAdminCarsIdPut'
            );
        }

        // verify the required parameter 'update_car_command' is set
        if ($update_car_command === null || (is_array($update_car_command) && count($update_car_command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_car_command when calling apiAdminCarsIdPut'
            );
        }


        $resourcePath = '/api/admin/cars/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_car_command)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_car_command));
            } else {
                $httpBody = $update_car_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminCarsPost
     *
     * @param  \OpenAPI\Client\models\CreateCarCommand $create_car_command create_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiAdminCarsPost($create_car_command, string $contentType = self::contentTypes['apiAdminCarsPost'][0])
    {
        $this->apiAdminCarsPostWithHttpInfo($create_car_command, $contentType);
    }

    /**
     * Operation apiAdminCarsPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\models\CreateCarCommand $create_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminCarsPostWithHttpInfo($create_car_command, string $contentType = self::contentTypes['apiAdminCarsPost'][0])
    {
        $request = $this->apiAdminCarsPostRequest($create_car_command, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminCarsPostAsync
     *
     * @param  \OpenAPI\Client\models\CreateCarCommand $create_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsPostAsync($create_car_command, string $contentType = self::contentTypes['apiAdminCarsPost'][0])
    {
        return $this->apiAdminCarsPostAsyncWithHttpInfo($create_car_command, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminCarsPostAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\models\CreateCarCommand $create_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminCarsPostAsyncWithHttpInfo($create_car_command, string $contentType = self::contentTypes['apiAdminCarsPost'][0])
    {
        $returnType = '';
        $request = $this->apiAdminCarsPostRequest($create_car_command, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminCarsPost'
     *
     * @param  \OpenAPI\Client\models\CreateCarCommand $create_car_command (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminCarsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminCarsPostRequest($create_car_command, string $contentType = self::contentTypes['apiAdminCarsPost'][0])
    {

        // verify the required parameter 'create_car_command' is set
        if ($create_car_command === null || (is_array($create_car_command) && count($create_car_command) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_car_command when calling apiAdminCarsPost'
            );
        }


        $resourcePath = '/api/admin/cars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_car_command)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_car_command));
            } else {
                $httpBody = $create_car_command;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminRentalsGet
     *
     * @param  int|null $page page (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminRentalsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\models\RentalDetailDto[]
     */
    public function apiAdminRentalsGet($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminRentalsGet'][0])
    {
        list($response) = $this->apiAdminRentalsGetWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation apiAdminRentalsGetWithHttpInfo
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminRentalsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\models\RentalDetailDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminRentalsGetWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminRentalsGet'][0])
    {
        $request = $this->apiAdminRentalsGetRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\RentalDetailDto[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\models\RentalDetailDto[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\RentalDetailDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminRentalsGetAsync
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminRentalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminRentalsGetAsync($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminRentalsGet'][0])
    {
        return $this->apiAdminRentalsGetAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminRentalsGetAsyncWithHttpInfo
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminRentalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminRentalsGetAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminRentalsGet'][0])
    {
        $returnType = '\OpenAPI\Client\models\RentalDetailDto[]';
        $request = $this->apiAdminRentalsGetRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminRentalsGet'
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminRentalsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminRentalsGetRequest($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminRentalsGet'][0])
    {




        $resourcePath = '/api/admin/rentals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'Page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'PageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAdminUsersGet
     *
     * @param  int|null $page page (optional)
     * @param  int|null $page_size page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminUsersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\models\UserDto[]
     */
    public function apiAdminUsersGet($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminUsersGet'][0])
    {
        list($response) = $this->apiAdminUsersGetWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation apiAdminUsersGetWithHttpInfo
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminUsersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\models\UserDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAdminUsersGetWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminUsersGet'][0])
    {
        $request = $this->apiAdminUsersGetRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\models\UserDto[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\models\UserDto[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\models\UserDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiAdminUsersGetAsync
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminUsersGetAsync($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminUsersGet'][0])
    {
        return $this->apiAdminUsersGetAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAdminUsersGetAsyncWithHttpInfo
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAdminUsersGetAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminUsersGet'][0])
    {
        $returnType = '\OpenAPI\Client\models\UserDto[]';
        $request = $this->apiAdminUsersGetRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAdminUsersGet'
     *
     * @param  int|null $page (optional)
     * @param  int|null $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiAdminUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAdminUsersGetRequest($page = null, $page_size = null, string $contentType = self::contentTypes['apiAdminUsersGet'][0])
    {




        $resourcePath = '/api/admin/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'Page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'PageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
